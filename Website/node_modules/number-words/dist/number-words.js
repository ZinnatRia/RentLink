(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.numberWords = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var magnitudes = ['thousand', 'million', 'billion', 'trillion', 'quadrillion'];

var addMagnitudes = function addMagnitudes(string, index) {
  return string && index ? string + ' ' + magnitudes[index - 1] : string;
};

exports.default = addMagnitudes;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var getReverseNumberParts = function getReverseNumberParts(number) {
  var parts = [];
  var int = Math.trunc(number);
  while (int > 0) {
    parts.push(int % 1000);
    int = Math.floor(int / 1000);
  }

  return parts;
};

exports.default = getReverseNumberParts;

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convert = undefined;

var _getReverseNumberParts = require('./get-reverse-number-parts');

var _getReverseNumberParts2 = _interopRequireDefault(_getReverseNumberParts);

var _toWords = require('./to-words');

var _toWords2 = _interopRequireDefault(_toWords);

var _addMagnitudes = require('./add-magnitudes');

var _addMagnitudes2 = _interopRequireDefault(_addMagnitudes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var convert = function convert(number) {
  if (number > Math.pow(2, 53) - 1) {
    return 'Maximum safe integer in JavaScript exceeded';
  }

  return (0, _getReverseNumberParts2.default)(number).map(_toWords2.default).map(_addMagnitudes2.default).reverse().join(' ').trim();
};

exports.convert = convert;

},{"./add-magnitudes":1,"./get-reverse-number-parts":2,"./to-words":4}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var words = {
  1: 'one',
  2: 'two',
  3: 'three',
  4: 'four',
  5: 'five',
  6: 'six',
  7: 'seven',
  8: 'eight',
  9: 'nine',
  10: 'ten',
  11: 'eleven',
  12: 'twelve',
  13: 'thirteen',
  14: 'fourteen',
  15: 'fifteen',
  16: 'sixteen',
  17: 'seventeen',
  18: 'eighteen',
  19: 'nineteen',
  20: 'twenty',
  30: 'thirty',
  40: 'forty',
  50: 'fifty',
  60: 'sixty',
  70: 'seventy',
  80: 'eighty',
  90: 'ninety'
};

var toWords = function toWords(number) {
  var result = [];
  if (number < 20) {
    if (number) {
      result.push(words[number]);
    }
  } else if (number < 100) {
    result.push(words[Math.floor(number / 10) * 10]);
    if (number % 10) {
      result.push(words[number % 10]);
    }
  } else {
    result.push(words[Math.floor(number / 100)]);
    result.push('hundred');
    if (number % 100) {
      result.push('and ' + toWords(number % 100));
    }
  }

  return result.join(' ');
};

exports.default = toWords;

},{}]},{},[3])(3)
});
